AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Cloud Formation Template to allow for selection of various sizes of EC2
  instances
Parameters: 
  Environment:
    Description: Which account is the environment being creates
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  # SubnetId:
  #   Description: my testing subnetID
  #   Type: AWS::EC2::Subnet::Id
  #   Default: subnet-0cc5c399dbddd3d5e
  # myVPC:
  #   Description: My testing vpc
  #   Type: AWS::EC2::VPC::Id
  # KeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #   Type: AWS::EC2::KeyPair::KeyName
  #   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # AvailabilityZone1:
  #   Description: The first availability zone in the region
  #   Type: AWS::EC2::AvailabilityZone::Name
  #   Default: us-east-1
  #   ConstraintDescription: Must be a valid availability zone

Mappings: 
  EC2Details:
    CommonDetails:
      VPC: vpc-0b418e1163d8c731a 
      InstanceType: m1.small
     


    dev:
      AMI: 'ami-0022c769'
      AvailabilityZone: us-east-1c
      #InstanceType:
      KeyName: JacobDevKey
      SubnetId: subnet-0806e3cb96c2d0214
      #SecurityGroupIds:
      
    prod:
      AMI: 'ami-0022c769'
      AvailabilityZone: us-east-1b
      #InstanceType:
      KeyName: JacobProdKey
      SubnetId: subnet-00325a73053958f94
      #SecurityGroupIds:
    qa:
      AMI: 'ami-0022c769'
      AvailabilityZone: us-east-1a
      #InstanceType:
      KeyName: JacobQaKey
      SubnetId: subnet-0b2361ab4c1147b05
      #SecurityGroupIds:


  RegionAndInstanceTypeToAMIID: 
      us-east-1: 
        dev: 'ami-0022c769'
        prod: 'ami-0022c769'
Conditions:
  Prod: 
    !Equals
        - !Ref Environment  
        - prod 
Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      #change these to !FindInMap
      KeyName: !FindInMap ['EC2Details', !Ref Environment, 'KeyName']
      SubnetId: !FindInMap ['EC2Details', !Ref Environment, 'SubnetId']
      SecurityGroupIds:
      - !Ref 'InstanceSecurityGroup'
      InstanceType: !FindInMap ['EC2Details', 'CommonDetails', 'InstanceType']
      AvailabilityZone: !FindInMap ['EC2Details', !Ref Environment, 'AvailabilityZone']
      ImageId: !FindInMap ['EC2Details', !Ref Environment, 'AMI']
      #is in
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            sudo yum -y install vault
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref AWS::Region, Instance, 'jacob']]
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId: !FindInMap ['EC2Details', 'CommonDetails', 'VPC']
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 443
          CidrIp: 0.0.0.0/0
        Tags:
        -
          Key: Name
          Value: !Join ['-', [SecurityGroup, !Ref AWS::Region, !Ref Environment]]

